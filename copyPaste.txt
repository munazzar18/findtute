 interface Experience {
  institute: string;
  title: string;
  startDate: string;
  endDate: string;
  present: boolean;
}

const initialExperience: Experience = { institute: "", title: "", startDate: ""  , endDate: "" , present: false};
 
 
   const [experiences, setExperiences] = useState<Experience[]>([initialExperience]);


  const handleAddExperience = () => {
    const updatedExperiences = [...formik.values.experiences, initialExperience];
    setExperiences(updatedExperiences);
    formik.setFieldValue("experiences", updatedExperiences);
  };

  const handleRemoveExperience = (index: number) => {
    const newExperiences = experiences.filter((_, i) => i !== index);
    setExperiences(newExperiences);
    formik.setFieldValue("experiences", newExperiences);
  };

  const handleLastExperience = (index: number) => {
    if (index > 0) {
      return index === experiences.length - 1;
    }
  };

  const handleAddLastExperience = (index: number) => {
    return index === experiences.length - 1;
  };
 
 
 
 {formik.values.experiences.map((experience, index) => (
              <div
                className="grid grid-cols-12 gap-4 items-baseline"
                key={index}
              >
                <div className="col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-4">
                  <Input
                    type="text"
                    variant="bordered"
                    label="Institute"
                    labelPlacement="outside"
                    size="lg"
                    isInvalid={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.institute
                        ? true
                        : false
                    }
                    color={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.institute
                        ? "danger"
                        : "primary"
                    }
                    onChange={formik.handleChange}
                    value={formik.values.experiences[index].institute}
                    name={`experiences[${index}].institute`}
                    errorMessage={
                      formik.touched.experiences &&
                      formik.touched.experiences[index] &&
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.institute
                        ? (
                            formik.errors
                              .experiences as FormikErrors<Experience>[]
                          )[index]?.institute
                        : ""
                    }
                  />
                </div>
                <div className="col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-3">
                  <Input
                    type="text"
                    variant="bordered"
                    label="Degree"
                    labelPlacement="outside"
                    size="lg"
                    isInvalid={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.degree
                        ? true
                        : false
                    }
                    color={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.degree
                        ? "danger"
                        : "primary"
                    }
                    onChange={formik.handleChange}
                    value={formik.values.experiences[index].degree}
                    name={`experiences[${index}].degree`}
                    errorMessage={
                      formik.touched.experiences &&
                      formik.touched.experiences[index] &&
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.degree
                        ? (
                            formik.errors
                              .experiences as FormikErrors<Experience>[]
                          )[index]?.degree
                        : ""
                    }
                  />
                </div>
                <div className="col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-3">
                  <Input
                    type="text"
                    variant="bordered"
                    label="Year"
                    labelPlacement="outside"
                    size="lg"
                    isInvalid={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.year
                        ? true
                        : false
                    }
                    color={
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.year
                        ? "danger"
                        : "primary"
                    }
                    onChange={formik.handleChange}
                    value={formik.values.experiences[index].year}
                    name={`experiences[${index}].year`}
                    errorMessage={
                      formik.touched.experiences &&
                      formik.touched.experiences[index] &&
                      formik.errors.experiences &&
                      formik.errors.experiences[index] &&
                      (formik.errors.experiences as FormikErrors<Experience>[])[
                        index
                      ]?.year
                        ? (
                            formik.errors
                              .experiences as FormikErrors<Experience>[]
                          )[index]?.year
                        : ""
                    }
                  />
                </div>
                <div className="col-span-12 sm:col-span-12 md:col-span-12 lg:col-span-2">
                  {handleAddLast(index) ? (
                    <Button
                      color="primary"
                      variant="ghost"
                      onClick={handleAddExperience}
                      isIconOnly
                      className="mx-1 w-full sm:w-full md:w-full lg:w-10"
                    >
                      <FontAwesomeIcon icon={faPlus} />
                    </Button>
                  ) : (
                    ""
                  )}

                  {handleLastExperience(index) ? (
                    <Button
                      color="primary"
                      variant="ghost"
                      isIconOnly
                      onClick={() => handleRemoveExperience(index)}
                      className="mx-1 w-full sm:w-full md:w-full lg:w-10"
                    >
                      <FontAwesomeIcon icon={faMinus} />
                    </Button>
                  ) : (
                    ""
                  )}
                </div>
              </div>
            ))}

